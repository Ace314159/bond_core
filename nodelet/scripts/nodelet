#! /usr/bin/env python
# Provides quick access to the services exposed by MechanismControlNode

import roslib
roslib.load_manifest('nodelet')

from optparse import OptionParser

import rospy, sys
from nodelet.srv import NodeletList, NodeletLoad, NodeletLoadRequest, NodeletUnload, NodeletUnloadRequest

class NodeletInterface():
    def __init__(self):
        self.name = None
        self.manager = None
    def load_nodelet(self, name, type, manager, remap_args):
        self.name = name
        self.manager = manager

        # move parameters into nodelets namespace
        parameters = rospy.get_param(rospy.get_name(), None)
        if parameters:
            rospy.delete_param(rospy.get_name())
            rospy.set_param(name, parameters)
        elif rospy.has_param(name):
            rospy.delete_param(name) ## TODO determine if this should be optional or off by default


        service_name = manager+"/load_nodelet"

        req = NodeletLoadRequest()
        req.name = name
        req.type = type
        for a in remap_args:
            s, ignore, t = a.partition(":=")
            if ignore:
                req.remap_source_args.append(s)
                req.remap_target_args.append(t)
        print req

        rospy.wait_for_service(service_name)
        service_client = rospy.ServiceProxy(service_name, NodeletLoad)
        resp = service_client(req)
        return resp.success

    def unload_nodelet(self, name, manager):
        service_name = manager+"/unload_nodelet"
        rospy.wait_for_service(service_name)
        service_client = rospy.ServiceProxy(service_name, NodeletUnload)
        req = NodeletUnloadRequest()
        req.name = name
        resp = service_client(req)
        print resp

    def shutdown(self):
        if self.name and self.manager:
            try:
                self.unload_nodelet(self.name, self.manager)
            except rospy.ServiceException, ex:
                rospy.logdebug("Unload on shutdown failed:%s", ex)

def usage():
    return '''nodelet <name> <type> <manager_node>        - Load the nodelet named <name> with type <type> into the nodelet manager <manager>'''

if __name__ == '__main__':
    parser = OptionParser(usage=usage())
    parser.add_option("--unload", dest="unload", action="store_true", default=False, help="call the unload service for the nodelet")
    parser.add_option("--non-blocking", dest="load_only", action="store_true", default=False, help="Load the nodelet and quit")

    
    rospy.init_node("nodelet", anonymous=True)
    options, args = parser.parse_args(rospy.myargv())

    ni = NodeletInterface()
    # hook for unloading controllers on shutdown

    if options.unload:
        ni.unload_nodelet(args[1], args[2])
        sys.exit(-1)

    remap_args = set(sys.argv[1:]) - set(rospy.myargv()) # remove standard args
    remap_args = set([a for a in remap_args if not a.startswith("__")]) # remove reserved ROS args

    if len(args) != 4:
        parser.error("Command 'spawn' requires 4 arguments not %d"%len(args))
    ni = NodeletInterface()
    ni.load_nodelet(args[1], args[2], args[3], remap_args)


    # if blocking register shutdown handler and spin
    if not options.load_only:
        rospy.on_shutdown(ni.shutdown)
        rospy.spin()
